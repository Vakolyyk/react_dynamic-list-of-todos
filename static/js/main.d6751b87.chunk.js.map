{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelect","selectedUserId","useState","filterByTitle","setFilterByTitle","filterByComplete","setFilterComplete","visibleTodos","setVisibleTodos","handleFilter","useCallback","filter","todo","queryToLower","toLowerCase","titleToLower","title","includes","completed","useEffect","className","type","placeholder","value","onChange","event","target","map","classNames","checked","readOnly","userId","onClick","id","BASE_URL","getTodosFromServer","a","fetch","response","json","getUserFromServer","user","CurrentUser","name","email","phone","setUser","getUser","userFromServer","App","setTodos","setSelectedUserId","getTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6751b87.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onSelect: React.Dispatch<React.SetStateAction<number>>,\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelect,\n  selectedUserId,\n}) => {\n  const [filterByTitle, setFilterByTitle] = useState('');\n  const [filterByComplete, setFilterComplete] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  const handleFilter = useCallback(() => {\n    setVisibleTodos(todos.filter(\n      todo => {\n        const queryToLower = filterByTitle.toLowerCase();\n        const titleToLower = todo.title.toLowerCase();\n\n        switch (filterByComplete) {\n          case 'all':\n            return titleToLower.includes(queryToLower);\n          case 'active':\n            return titleToLower.includes(queryToLower) && !todo.completed;\n          case 'completed':\n            return titleToLower.includes(queryToLower) && todo.completed;\n          default:\n            return todo;\n        }\n      },\n    ));\n  }, [todos, filterByTitle, filterByComplete]);\n\n  useEffect(() => {\n    handleFilter();\n  }, [filterByTitle, filterByComplete, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__filter\">\n        <input\n          type=\"text\"\n          className=\"TodoList__field\"\n          placeholder=\"Enter title\"\n          data-cy=\"filterByTitle\"\n          value={filterByTitle}\n          onChange={(event) => setFilterByTitle(event.target.value)}\n        />\n\n        <select\n          className=\"TodoList__field\"\n          value={filterByComplete}\n          onChange={(event) => {\n            setFilterComplete(event.target.value);\n          }}\n        >\n          <option value=\"all\">\n            All\n          </option>\n          <option value=\"active\">\n            Active\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  },\n                )}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  onSelect(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodosFromServer = async () => {\n  const response = await fetch(`${BASE_URL}/todos`);\n  const todos: Todo[] = await response.json();\n\n  return todos;\n};\n\nexport const getUserFromServer = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n  const user = await response.json();\n\n  return user;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUserFromServer } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onSelect: (id: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onSelect }) => {\n  const [user, setUser] = useState<User>({\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n  });\n\n  const getUser = useCallback(async (id: number) => {\n    const userFromServer = await getUserFromServer(id);\n\n    setUser(userFromServer);\n  }, [userId]);\n\n  useEffect(() => {\n    getUser(userId);\n  }, [userId]);\n\n  return (\n    <>\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n      </div>\n      <button\n        className=\"button button__clear\"\n        type=\"button\"\n        onClick={() => {\n          onSelect(0);\n        }}\n      >\n        Clear\n      </button>\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosFromServer } from './api/api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const getTodos = useCallback(async () => {\n    const todosFromServer = await getTodosFromServer();\n\n    setTodos(todosFromServer);\n  }, []);\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onSelect={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onSelect={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}