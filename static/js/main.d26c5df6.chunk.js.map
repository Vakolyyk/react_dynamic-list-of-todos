{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelect","selectedUserId","useState","query","setQuery","filterComplete","setFilterComplete","visibleTodos","setVisibleTodos","useEffect","filter","todo","queryToLower","toLowerCase","titleToLower","title","includes","completed","className","type","placeholder","value","onChange","event","target","map","classNames","checked","readOnly","id","onClick","userId","BASE_URL","getTodosFromServer","a","fetch","response","json","getUserFromServer","user","CurrentUser","name","email","phone","setUser","getUser","userFromServer","App","setTodos","setSelectedUserId","getTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d26c5df6.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onSelect: React.Dispatch<React.SetStateAction<number>>,\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelect,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [filterComplete, setFilterComplete] = useState('');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  const handleFilter = () => {\n    setVisibleTodos(todos.filter(\n      todo => {\n        const queryToLower = query.toLowerCase();\n        const titleToLower = todo.title.toLowerCase();\n\n        switch (filterComplete) {\n          case 'all':\n            return titleToLower.includes(queryToLower);\n          case 'active':\n            return titleToLower.includes(queryToLower) && !todo.completed;\n          case 'completed':\n            return titleToLower.includes(queryToLower) && todo.completed;\n          default:\n            return todo;\n        }\n      },\n    ));\n  };\n\n  useEffect(() => {\n    handleFilter();\n  }, [query, filterComplete, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__filter\">\n        <input\n          type=\"text\"\n          className=\"TodoList__field\"\n          placeholder=\"Enter title\"\n          data-cy=\"filterByTitle\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n\n        <select\n          className=\"TodoList__field\"\n          value={filterComplete}\n          onChange={(event) => {\n            setFilterComplete(event.target.value);\n          }}\n        >\n          <option value=\"\">\n            Choose a type of todo\n          </option>\n          <option value=\"all\">\n            All\n          </option>\n          <option value=\"active\">\n            Active\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                      todo.id === selectedUserId,\n                  },\n                )}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  onSelect(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodosFromServer = async () => {\n  const response = await fetch(`${BASE_URL}/todos`);\n  const todos: Todo[] = await response.json();\n\n  return todos;\n};\n\nexport const getUserFromServer = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n  const user = await response.json();\n\n  return user;\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserFromServer } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onSelect: (id: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onSelect }) => {\n  const [user, setUser] = useState<User>({\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n  });\n\n  const getUser = async (id: number) => {\n    const userFromServer = await getUserFromServer(id);\n\n    setUser(userFromServer);\n  };\n\n  useEffect(() => {\n    getUser(userId);\n  }, [userId]);\n\n  return (\n    <>\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n      </div>\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={() => {\n          onSelect(0);\n        }}\n      >\n        Clear\n      </button>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosFromServer } from './api/api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const getTodos = async () => {\n    const todosFromServer = await getTodosFromServer();\n\n    setTodos(todosFromServer);\n  };\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onSelect={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onSelect={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}